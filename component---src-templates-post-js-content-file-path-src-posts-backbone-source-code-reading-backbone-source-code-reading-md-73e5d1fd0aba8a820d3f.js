"use strict";(self.webpackChunkchun_hao_lai=self.webpackChunkchun_hao_lai||[]).push([[266],{1584:function(n,a,s){s.r(a),s.d(a,{default:function(){return v}});var t=s(1151),e=s(7294);function p(n){const a=Object.assign({p:"p",h2:"h2",span:"span",ul:"ul",li:"li",ol:"ol",strong:"strong"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"Here are some notes I took when I was reading the source code of Backbone.js."),"\n",e.createElement(a.h2,null,"How to implement the listenTo method"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">object<span class="token punctuation">.</span><span class="token function">listenTo</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span> event<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>  </code></pre></div>'}}),"\n",e.createElement(a.p,null,"The listenTo method is used to bind a callback function to an event on another object. The callback will always be called whenever the event is fired."),"\n",e.createElement(a.p,null,"Instead of checking the whole list of events every time an event is fired as following."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">static</span> events <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token function">listenTo</span><span class="token punctuation">(</span><span class="token parameter">other<span class="token punctuation">,</span> event<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token comment">// Add the event, target object, and //callback to the global list of events</span>\r\n    MyObject<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> other<span class="token punctuation">,</span> event<span class="token punctuation">,</span> callback <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token function">triggerEvent</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token comment">// For each event in the global list...</span>\r\n    MyObject<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n      <span class="token comment">// If the event name and target object match...</span>\r\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>event <span class="token operator">===</span> eventName <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>other <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token comment">// Call the callback</span>\r\n        e<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n      <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Backbone uses a inverse approach. It keeps a list of events on the target object. Whenever an event is fired, Backbone will check the list of events on the target object and call the corresponding callbacks."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token punctuation">{</span>\r\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token function">listenTo</span><span class="token punctuation">(</span><span class="token parameter">other<span class="token punctuation">,</span> event<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token comment">// If there\'s not already a list of listeners for this event, create one</span>\r\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token comment">// Add the callback to the list of listeners for this event</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n    <span class="token comment">// When the event is triggered on the other object, call the callback</span>\r\n    other<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.h2,null,"SPA history management"),"\n",e.createElement(a.p,null,"How to implement the history management in a SPA?"),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"Use the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">popstate</code>'}})," event to detect the change of the path part of the URL."),"\n",e.createElement(a.li,null,"Use the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hashchange</code>'}})," event to detect the change of the hash part of the URL."),"\n",e.createElement(a.li,null,"Use the polling technique to detect the change of the path part of the URL in browsers that don't support the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">popstate</code>'}})," or ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hashchange</code>'}})," event."),"\n"),"\n",e.createElement(a.p,null,"A brief of implementation of the above three methods:"),"\n",e.createElement(a.ol,null,"\n",e.createElement(a.li,null,e.createElement(a.strong,null,"popstate event"),": The ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">popstate</code>'}})," event is fired when the active history entry changes, except in the case of ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pushState()</code>'}})," or ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">replaceState()</code>'}})," operations. You can add an event listener for the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">popstate</code>'}})," event and update your application state based on the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">state</code>'}})," object that is passed to the event handler."),"\n"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'popstate\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token comment">// event.state is the state object passed to pushState</span>\r\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"state: "</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.ol,{start:"2"},"\n",e.createElement(a.li,null,e.createElement(a.strong,null,"hashchange event"),": The ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hashchange</code>'}})," event is fired when the fragment identifier of the URL (the part of the URL that follows the # symbol) changes. You can add an event listener for the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hashchange</code>'}})," event and update your application state based on the new hash."),"\n"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'hashchange\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token comment">// location.hash is the new hash</span>\r\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hash: "</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.ol,{start:"3"},"\n",e.createElement(a.li,null,e.createElement(a.strong,null,"polling"),": For browsers that don't support the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">popstate</code>'}})," or ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hashchange</code>'}})," events, you can use a polling technique to check if the URL has changed. This involves periodically checking the current URL and comparing it to the last known URL."),"\n"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> lastURL <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>\r\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastURL <span class="token operator">!==</span> location<span class="token punctuation">.</span>href<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token comment">// The URL has changed</span>\r\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"URL: "</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    lastURL <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Check every second</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"In all these cases, when a change is detected, Backbone would typically update your application state to reflect the new URL. This might involve showing or hiding different parts of the UI, fetching data based on the new URL, etc."))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},c=s(609),l=s(4184),u=s.n(l),r=s(5570),i=s(4160),k=s(3551),h=s(4756);const g={Link:i.rU,pre:n=>{const a=(0,k.u)(n);return a?e.createElement(h.Z,a):e.createElement("pre",n)}},d=(0,c.QM)({blogContent:{margin:"0 auto",fontSize:"1rem","& h1":{lineHeight:"2.3rem"},"& h2":{lineHeight:"1.8rem"}}}),m=(0,r.X)((n=>{let{data:a,children:s}=n;const p=d();return e.createElement("div",{className:u()("blog-content",p.blogContent)},e.createElement("h1",null,a.mdx.frontmatter.title),e.createElement(t.Zo,{components:g},s))}));function v(n){return e.createElement(m,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-js-content-file-path-src-posts-backbone-source-code-reading-backbone-source-code-reading-md-73e5d1fd0aba8a820d3f.js.map